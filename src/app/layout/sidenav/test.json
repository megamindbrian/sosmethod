["var vm = require('vm');\n",
"var fs = require('fs');\n",
"// TODO: exports, require, module, __filename, __dirname\n",
"if (typeof importNotebook == 'undefined') {\n",
"    require('child_process').execSync('npm install JSONStream');\n",
"}\n",
"if (typeof runningNotebooks == 'undefined') {\n",
"    var runningNotebooks = ['How to find answers.ipynb'];\n",
"}\n",
"if (typeof commandRegistry == 'undefined') {\n",
"    var commandRegistry = [];\n",
"    commandRegistry['commandRegistry'] = commandRegistry;\n",
"}\n",
"$$.done('import ready');\n", "\n",
"var getCells = (notebook, types) => {\n",
"    if (typeof types == 'undefined') {\n",
"        var types = 'code';\n",
"    }\n",
"    var cellsToRun = [];\n",
"    if (runningNotebooks.indexOf(notebook) > -1) {\n",
"        throw 'Already imported ' + runningNotebooks.toString();\n",
"    }\n",
"    runningNotebooks[runningNotebooks.length] = notebook;\n",
"    var cells = fs.createReadStream(notebook).pipe(require('JSONStream').parse('cells.*'));\n",
"    cells.on('data', (cell) => {\n",
"        if(cell.cell_type === types) {\n",
"            cellsToRun[cellsToRun.length] = cell.source.join('').trim();\n",
"        }\n",
"    });\n",
"    return new Promise((resolve, reject) => {\n",
"        cells.on('error', e => reject(e));\n",
"        cells.on('close', () => resolve(cellsToRun))\n",
"    });\n",
"};\n",
"commandRegistry['getCells'] = getCells;\n",
"$$.done(getCells);\n",
"\n", "\n",
"// supported format How to find answers.ipynb[2]\n",
"var promiseContext = (scripts, notebook) => {\n",
"    var tempGlobal = Object.assign({}, global);\n",
"    tempGlobal = Object.assign(tempGlobal, commandRegistry);\n",
"    tempGlobal.$$ = Object.assign({}, $$);\n",
"    var context = vm.createContext(tempGlobal);\n",
"    return scripts.map((cell, i) => {\n",
"        var script = new vm.Script('\\n\\nconsole.log('running cell(${i})');\\n\\n' + cell + '\\n\\n;\\n\\n');\n",
"        return ((resolve, reject) => {\n",
"            var result;\n",
"            try {\n",
"                var tmp$$ = Object.assign(tempGlobal.$$, {\n",
"                    _isAsync: false,\n",
"                    async: () => tmp$$._isAsync = true,\n",
"                    done: (d) => resolve(d, i)\n",
"                });\n",
"                tempGlobal.$$ = tmp$$;\n",
"                result = script.runInContext(context);\n",
"                if (!tmp$$._isAsync) {\n",
"                    return resolve(result, i);\n",
"                }\n",
"            } catch (e) {\n",
"                return resolve(e, i);\n",
"            }\n",
"        });\n",
"    });\n",
"};\n",
"commandRegistry['promiseContext'] = promiseContext;\n",
"$$.async();\n",
"var cell = [\n",
"    'console.log(\"Sucessfully ran a script in it\\'s own context!\")'\n",
"];\n",
"promiseContext(cell, 'this one')\n",
"    .map((p) => new Promise(p))[0]\n",
"    .then(() => $$.done(promiseContext));\n", "\n",
"\n",
"var runAllPromises = (promises, notebook) => {\n",
"    return promises.reduce((promise, func) => {\n",
"        return promise.then(result => {\n",
"            return (new Promise(func)).then((r, i) => {\n",
"                console.log(r);\n",
"                return r\n",
"            }).then(Array.prototype.concat.bind(result))\n",
"                .catch(e => console.log('error' + e))\n",
"        });\n",
"    },Promise.resolve([])).catch(e => console.log('error' + e));\n",
"};\n",
"commandRegistry['runAllPromises'] = runAllPromises;\n",
"$$.async();\n",
"var cells = [\n",
"    '$$.done(\"promise 1\")',\n",
"    '$$.done(\"promise 2\")',\n",
"    '$$.done(\"Sucessfully ran a all promises!\")'\n",
"];\n",
"var promises = promiseContext(cells, 'this one')\n",
"runAllPromises(promises, 'this one')\n",
"    .then((results) => {\n",
"        $$.done(runAllPromises);\n",
"        console.log(results);\n",
"        return results;\n",
"    });\n","\n",
"var importNotebook = (notebook) => {\n",
"    if(typeof notebook === 'undefined') {\n",
"        return;\n",
"    }\n",
"    return getCells(notebook, 'code').then((cells) => {\n",
"        var promises = promiseContext(cells, notebook);\n",
"        console.log('started notebook ' + notebook);\n",
"        return runAllPromises(promises, notebook);\n",
"    }).then((results) => {\n",
"        results.forEach(r => {\n",
"            if (typeof r === 'function') {\n",
"                commandRegistry[notebook+'['+i+']'] = r;\n",
"            }\n",
"        });\n",
"        console.log(results);\n",
"        console.log('ran notebook ' + notebook);\n",
"        return results;\n",
"    });\n",
"}\n",
"commandRegistry['importNotebook'] = importNotebook;\n",
"$$.async();\n",
"if (typeof imports === 'undefined') { var imports = Promise.resolve() } try {\n",
"imports = imports.then(importNotebook('How to test import.ipynb'))\n",
"    .then((results) => {\n",
"        console.log(results);\n",
"        $$.done(importNotebook);\n",
"        return results;\n",
"    }).catch((e) => $$.done(e));\n",
"} catch (e) {$$.done(e)}\n","\n",
"// Does this work everywhere?\n",
"var $c = console.log;\n",
"if (typeof notebook == 'undefined') {\n",
"    var notebook = 'How to find answers.ipynb';\n",
"}\n",
"if (typeof importNotebook == 'undefined') {\n",
"    var importNotebook = true;\n",
"    try {\n",
"        var m, co = '', vm = require('vm');\n",
"        var source = require('fs').readFileSync(notebook).toString();\n",
"        var re = new RegExp('\\\\s*\"cell_type\": \"code\",\\\\s*\"source\":\\\\s*\\\\[\\\\s*([\\\\s\\\\S]*?\\\\$\\\\$.done[\\\\s\\\\S]*?)\\\\s*\\\\]\\\\s*,\\s*', 'ig');\n",
"        while (m = re.exec(source)) { co += (co == '' ? '' : ',\\n' ) + m[1] + ',\"\\\\n\"'; }\n",
"        console.log(co);\n",
"        co = '\\n\\$$ = get$$();\\n\\n' + JSON.parse('['+co+']').join('') + '\\n\\n;';\n",
"        global.getGlobal = () => global;\n",
"        global.get$$ = () => {\n",
"            var temp$$ = Object.assign({}, global.$$);\n",
"            return Object.assign(temp$$, {\n",
"                async: () => {},\n",
"                done: (done) => {}\n",
"            });\n",
"        };\n",
"        var tmpGlobal = Object.assign({}, global);\n",
"        var context = vm.createContext(tmpGlobal);\n",
"        (new vm.Script(co)).runInContext(context);\n",
"        $$.async();\n",
"        tmpGlobal.imports.then((done) => {\n",
"            Object.assign(global, tmpGlobal.commandRegistry);\n",
"            $$.done(done);\n",
"        });\n",
"    } catch (e) {\n",
"        $$.done(e);\n",
"    }\n",
"}\n","\n",
"$$.async();\n",
"if (typeof imports === 'undefined') { var imports = Promise.resolve() } try {\n",
"imports = imports.then(importNotebook('How to interpret questions.ipynb'))\n",
"    .then((results) => $$.done(results))\n",
"    .catch((e) => $$.done(e));\n",
"} catch (e) {$$.done(e)}", "\n",
"\n",
"$$.done('done importing importing')\n","\n"]